function [atlas_data,ROI] = cluster2atlas(clusters,atlasnii,atlaslist,regions,varargin)
% CLUSTER2ATLAS gets a reference atlas and clusters created by functional
% clustering and maps the clusters to the given atlas.
%
% [ATLAS_DATA,ROI] = CLUSTER2ATLAS(CLUSTERS,ATLASNII,ATLASLIST,REGIONS) 
% gets the path to the clusters CLUSTERS (1-by-N cell) generated by functional 
% clustering with kmeans and maps them to a desired atlas for the desired 
% regions REGIONS (1-by-N array). The atlas defined by the path to its 
% nifti file ATLASNII and the list of regions ATLAS_LIST. ATLAS_DATA (2D or 
% 3D matrix) is the mapped version of the clusters and ATLASLIST is the
%  list of regions in the new atlas.
%
% CLUSTER2ATLAS(CLUSTERS,ATLASNII,ATLASLIST,REGIONS,Property1,Value1) 
%  initializes property Property1 to Value1.
%   Admissible property:
%       save     -   file name to save ATLAS_DATA and ROI
%       nii      -   file name of the output nifti file (append .nii)
%
% See also nifti, img2atlas, ClusterWithKmeans, save_nii.
%
% J. V. Dornas, E. Kakaei, J. Braun 2018

%% initialize
save_file = false;
nii = false;
for n = 1:2:length(varargin)-1
    switch varargin{n}
        case 'save'
            save_file = varargin{n+1};
            if ~ischar(save_file)
                error('file name should be character')
            end
        case 'nii'
            nii =  varargin{n+1};
            if ~ischar(nii)
                error('name of the nifti file should be character')
            end
    end
end
%% load atlas, cluster and list
ROI_ref = open_nii(atlasnii); % nifti file of the reference atlas
ROI_ref_dat = ROI_ref.dat(:); % list of reference regions
ROI_list = load(atlaslist);
if ~isfield(ROI_list,'ROI')
    error('ROI not defined in brain atlas list')
end
names = {ROI_list.ROI(regions).Nom_L}; % name of the regions
labels = {ROI_list.ROI(regions).Nom_C}; % region labels

prev_clus = 0;
s = 0;
atlas_data = zeros(ROI_ref.dat.dim);
fprintf(['mapping clusters to atlas ...\n'])
for ind = 1:length(regions) % number of files should be equal with number of regions
    fprintf([num2str(ind),' out of ',num2str(length(regions)) '\n'])
    % mapping clusters to atlas
    region_ID = ROI_list.ROI(regions(ind)).ID; % ID of the region(ind)
    index = find(ROI_ref_dat==region_ID); % voxels inside the region(ind)
    cls = load(clusters{ind}); % clusters of the region(ind)
    Idx = prev_clus+cls.Idx; % cluster ID
    atlas_data(index) = Idx;
    prev_clus = max(Idx);
    
    % creating list of regions
    for iname = 1:max(cls.Idx)
        s = s+1;
        ROI(s).ID = s;
        ROI(s).Nom_C = strcat(labels(ind),num2str(iname));
        ROI(s).Nom_L = strcat(names(ind),'_',num2str(iname));
    end
end
%% saves
if  save_file % save atlas_data as .mat
    fprintf(['saving ',save_file,' ...\n'])
    save([save_file '.mat'],'atlas_data','-v7.3')
    save([save_file '_List.mat'],'ROI','-v7.3')
end
if nii % save atlas_data as nifti file
    prop.mat = ROI_ref.mat;
    prop.mat_intent = ROI_ref.mat_intent;
    prop.mat0 = ROI_ref.mat0;
    prop.mat0_intent = ROI_ref.mat0_intent;
    prop.dim = ROI_ref.dat.dim;
    prop.dtype = ROI_ref.dat.dtype;
    prop.offset = ROI_ref.dat.offset;
    prop.scl_slope = ROI_ref.dat.scl_slope;
    prop.scl_inter = ROI_ref.dat.scl_inter;
    prop.descript = strcat('functional parcellation of',nii);
    prop.timing = ROI_ref.timing;
    save_nii(atlas_data,nii,prop)
end
end
